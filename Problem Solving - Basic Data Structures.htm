<h1>Основные структуры данных</h1>
<h2>Цели</h2>
<p><ul>
	<li>Понять абстрактные типы данных: стек, очередь, дек и список.</li>
	<li>Быть способными реализовать АТД для стека, очереди и дека с помощью списков Python.</li>
	<li>Понять эффективности реализаций основных линейных структур данных.</li>
	<li>Разобраться в префиксных, инфиксных и постфиксных форматах выражений.</li>
	<li>Научиться использовать стек для вычисления постфиксных выражений.</li>
	<li>Научиться использовать стек для конвертирования инфиксных выражений в постфиксные</li>
	<li>Научиться использовать очереди для основных хронометражных симуляций.</li>
	<li>Быть способными распознавать задачи, для решения которых подходящими структурами данных будут стеки, очереди или деки.</li>
	<li>Быть способными реализовать АТД списка как связанный список, используя модель узлов и ссылок.</li>
	<li>Быть способными сравнить производительность нашей реализации связанного списка со списком Python.</li>
</ul></p>

<h2>Что такое линейные структуры?</h2>
<p>Мы начнём наше изучение структур данных с рассмотрения четырёх простых, но очень мощных концепций. Стеки, очереди, деки и списки являются примерами коллекций данных, чьи составляющие упорядочены в зависимости от того, как они добавлялись или удалялись. Единожды добавленный, элемент остаётся на одном и том же месте по отношению к остальным, пришедшим раньше и позже него. Коллекции такого рода часто называют <b>линейными структурами данных</b></p>

<p>О линейных структурах можно думать, как об имеющих два конца. Иногда эти концы называют "левым" и "правым", иногда - "передним" и "задним". Вы также можете именовать их "верхним" и "нижним" - точная терминология тут не принципиальна. В чём отличие одной линейной структуры от другой, так это в способе, каким добавляются или удаляются их элементы, в частности - в месте, где происходят данные операции. Например, структура может разрешать новым элементам добавляться только в конец. Или отдельные структуры позволяют удалять элементы с любого края.</p>

<p>Эти различия порождают некоторые из наиполезнейших структур данных в информатике, которые фигурируют во многих алгоритмах и могут использоваться для решения целого ряда важных задач.</p>
